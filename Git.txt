Liste des commandes git

init : 
Crée un dossier git vide, ou (ré)initialise un dossier déjà existant

status :
Récupère l'état actuel du dossier git

add : 
Ajoute le(s) élément(s) dans la liste des fichiers et dossiers à gérer par git

commit : 
Enregistre et nomme (via -m "") les changements effectués

log :
Affiche  tous les changements enregistrés (les commit)

remote add origin:
Ajoute au dossier git un "repository" distant, et le lie a udossier 'origin'

push :
envoie sur le repo distant les modifications enregistrées dans le dernier commit.

push -u origin master:
-u permet de se rappeler, das ce contexte d'utilisation, quels sont les paramètres de la fonction push :
	origin : l'élément à push (notre repo local)
	master : le nom de la 'branch' dans laquelle nous allons push notre élément

pull :
récupère les changements du repo distant sur notre repo local

pull origin master:
'pull' dans origin ce qui vient de master

diff:
Montre les différences entre l'état actuel de notre repo local et un état 'committé'

diff HEAD:
Précise que l'état auquel on veut comparer est le dernier commit

diff --staged:
??

reset :
inverse de add sur un élément. Si c'est un élément qui a été 'add' il ne le sera plus. Il existera toujours, mais ne fera plus partie des éléments "gérés" par git

checkout :
remet l'élément à l'état du précédent commit

branch <NewBranchName>:
crée une "branch" sur notre "arbre". On crée ainsi un nouveau contexte, indépendant de la branch "master", dans lequel nous allons travailler. on poura les merge éventuellement plus tard

branch:
Liste l'ensemble des branch actuellement disponibles.

checkout <BranchName>:
change de "branch" de travail, on travaille désormais sur la branch <BranchName>

rm <>:
remove -> supprime de notre repo local le(s) élément(s) <>, et notifie git de cette suppression (ajout dans le journal)

merge <BranchToMerge>:
fusionne la branch dans laquelle on travaille avec la branch <BranchToMerge>

branch -d <BranchToDelete>:
supprime la branch <BranchToDelete>